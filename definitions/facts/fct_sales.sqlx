config {
    type: "table",
    description: "Fact table for sales order line items, joining on natural keys.",
    tags: ["facts"],
    bigquery: {
        partitionBy: "DATE_TRUNC(order_date, MONTH)",
        clusterBy: ["product_key", "customer_key", "territory_key"]
    }
}

-- This model creates the main sales fact table by joining on natural keys.

WITH sales_orders AS (
    SELECT
        soh.OrderDate as order_date,
        sod.SalesOrderID as sales_order_id,
        sod.SalesOrderDetailID as sales_order_detail_id,
        sod.ProductID as product_id,
        soh.CustomerID as customer_id,
        soh.TerritoryID as territory_id,
        sod.OrderQty as order_qty,
        sod.UnitPrice as unit_price,
        sod.UnitPriceDiscount as unit_price_discount,
        sod.LineTotal as line_total,
        soh.Freight as freight,
        soh.TaxAmt as tax_amt
    FROM
        `team_day_2025_adventure_works_oltp.Sales_SalesOrderDetail` sod
    JOIN
        `team_day_2025_adventure_works_oltp.Sales_SalesOrderHeader` soh ON sod.SalesOrderID = soh.SalesOrderID
)

SELECT
    -- Foreign Keys (using natural keys from source)
    CAST(FORMAT_DATE('%Y%m%d', DATE(so.order_date)) AS INT64) as order_date_key,
    so.product_id as product_key,
    so.customer_id as customer_key,
    so.territory_id as territory_key,

    -- Degenerate Dimensions
    so.sales_order_id,
    so.sales_order_detail_id,

    -- Measures
    so.order_qty,
    so.unit_price,
    so.unit_price_discount,
    so.line_total,
    so.freight,
    so.tax_amt
FROM
    sales_orders so
